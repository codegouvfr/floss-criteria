* Développements des critères selon des domaines et des catégories

_Enjeux_

- Comment choisir un projet open source de manière raisonnée ? 

_Description_

Analyser un projet open source afin de le choisir de manière raisonnée peut se faire
selon plusieurs critères. 
L'ensemble des critères identifiés ont été regroupés dans des catégories et des domaines.
L'approche n'est pas centrée sur la mesure mais sur l'information qu'on espère en tirer.

L'objectif ne sera jamais d'évaluer l'ensemble des critères possibles mais d'être conscient
des critères possibles et d'opérer un choix en fonction de leurs intérêts respectifs. 

_Pour aller plus loin_

| Article                                                                                                                                                    | Lien                               |
|------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------------------------|
| Claudia Ruiz, William Robinson. Towards a Unified Definition of Open Source Quality. 9th Open Source Software (OSS), Oct 2011, Salvador, Brazil. pp.17-33, | https://hal.science/hal-01570776v1 |

_Exemples d'outils_

| Outil                        | Lien                                        |
|------------------------------+---------------------------------------------|
| Score de la Linux Foundation | https://github.com/linuxfoundation/insights |

** Domaine *Fonctionnel* 

_Enjeux_ 

- Est-ce que ce logiciel couvre mes besoins avec ses fonctionnalités ? 

_Description_

Dans ce domaine, on analyse une partie ou l'ensemble des fonctionnalités d'un logiciel.
L'objectif est d'être conscient des gains fonctionnels apportés par le logiciel.

_Liens_
- Si le logiciel répond à mes besoins alors je pourrais analyser sa maintenabilité ou son efficacité.
- S'il n'y répond pas, alors je pourrais analyser la charge nécessaire pour couvrir le manque en fonction de sa criticité. 

*** Catégorie *Fonctionnalités* 

_Enjeux_ 

- Est-ce que les fonctionnalités disponibles recouvrent celles attendues ?
- Est-ce que le focus fonctionnel du logiciel est différent du mien ?
	
_Description_

Dans cette catégorie, on compare les fonctionnalités disponibles avec celles qui sont attendues.
Le tout en pondérant les fonctionnalités attendues afin de comparer le focus fonctionnel de chacun des éléments. 

**** Critère *Couverture fonctionnelle*

_Objectif_
Quelle est la couverture fonctionnelle vis-à-vis des attentes ?

_Actions_
- Lister et pondérer les fonctionnalités attendues sur trois niveaux a minima : nécessaire, attendu, facultatif.
- Lister les fonctionnalités couvertes par le logiciel
- Relier les fonctionnalités couvertes avec celles attendues
- Quantifier la couverture globale et selon chaque pondération

_Notation_
Pourcentage global et selon chaque pondération de la couverture fonctionnelle

**** Critère *Mise à niveau fonctionnelle*

_Objectif_
Quelle est la possibilité de mise à niveau fonctionnelle ? 

_Actions_
- Lister et pondérer les fonctionnalités non couvertes mais attendues, selon trois niveaux a minima : nécessaire, attendu, facultatif.
- Évaluer la possibilité de développer ces fonctionnalités
- Quantifier les fonctionnalités intégrables selon chaque pondération

_Notation_
Pourcentage global et selon chaque pondération de la mise à niveau fonctionnelle

** Domaine *Utilisation* 

_Enjeux_

- Est-ce que le logiciel est facilement utilisable de par sa conception et sa distribution ?

_Description_

Dans ce domaine, l'objectif est d'évaluer la facilité de l'utilisation du logiciel
et donc la satisfaction qu'il engendre chez ses utilisateurs. 
Cette utilisation s'évalue selon diverses catégories comme la compréhensibilité, l'accessibilité, etc...  

*** Catégorie *Découvrabilité*

_Enjeux_

- Est-ce qu'il est facile de découvrir le projet ? 
  
_Description_

Dans cette catégorie, on cherche à comprendre si un projet est facilement découvrable par une personne qui ne le connait pas.
Il ne s'agit pas seulement du code, mais aussi des autres facettes du projet comme la documentation, les communautés, etc... 

**** Critère *Découverte du code* 

_Objectif_
Est-ce que le code est facilement atteignable pour les nouveaux venus ?

_Actions_
- Chercher le code sur internet : "nom du projet code source" dans plusieurs moteurs de recherche

_Notation_
Note entre 1 et 5, du plus difficile à trouver au plus facile

**** Critère *Découverte de la documentation* 

_Objectif_
Est-ce que la documentation est facilement atteignable pour les nouveaux venus ?

_Actions_
- Chercher la documentation sur internet : "nom du projet documentation" dans plusieurs moteurs de recherche
- Chercher la documentation depuis le code source

_Notation_
Note entre 1 et 5, du plus difficile à trouver au plus facile

**** Critère *Découverte des communautés* 

_Objectif_
Est-ce que les communautés sont facilement atteignables pour les nouveaux venus ?

_Actions_
- Chercher les communautés depuis le code source
- Chercher les communautés depuis la documentation

_Notation_
Note entre 1 et 5, du plus difficile à trouver au plus facile

*** Catégorie *Compréhensibilité* 

_Enjeux_

- Est-ce qu'il est facile de comprendre la raison d'être de ce logiciel ?
- Quelles sont ses fonctionnalités principales ?

_Description_

Dans cette catégorie, on cherche à savoir si une personne comprend facilement l'utilité et la raison d'être du logiciel. 

**** Lier au critère *Readme*

*** Catégorie *Accessibilité* 

_Enjeux_

- Est-ce que le logiciel est utilisable par des personnes en situation de handicape ?
  
_Description_

Dans cette catégorie, nous évaluons la possibilité pour une personne en situation de handicape d'utiliser le logiciel.

Nous n'évaluons pas l'accessibilité des contributions au code car elle dépend des outils de
contribution qui sont communs à un très grand nombre de projet. 

**** Critère *RGAA*

_Objectif_
Quelle est la couverture du RGAA ? 

_Actions_
- Évaluation des critères du RGAA
      
_Notation_
Note du RGAA

*** Catégorie *Apprentissage* 

_Enjeux_

- Est-ce qu'il est facile d'apprendre à se servir de ce logiciel ? 
- Est-ce qu'il est facile d'apprendre à développer sur ce logiciel ?
- Est-ce qu'il est facile d'apprendre à développer à partir de ce logiciel ?
    
_Description_

Dans cette catégorie, l'objectif est de déterminer si une personne apprendrait facilement à se servir du logiciel.

**** Critère *Courbe d'apprentissage à l'utilisation*

_Objectif_
Quelle est la courbe d'apprentissage pour se servir de ce logiciel ?

_Actions_
- Interviews d'utilisateurs pour évaluer leur courbe d'apprentissage pour se servir du logiciel
      
_Notation_
Note entre 1 et 5, du plus difficile au plus facile à apprendre 

**** Critère *Courbe d'apprentissage à la contribution*

_Objectif_
Quelle est la courbe d'apprentissage pour contribuer à ce logiciel ?

_Actions_
- Interviews de contributeurs pour évaluer leur courbe d'apprentissage sur le logiciel
      
_Notation_
Note entre 1 et 5, du plus difficile au plus facile à apprendre

**** Critère *Formations à l'utilisation*

_Objectif_
Existe-t-il des formations pour apprendre à se servir de ce logiciel ?

_Actions_
- Analyse des formations référencées depuis le site web du projet
      
_Notation_
Nombre de personnes formées par an dans le pays d'acceuil de l'étude

**** Critère *Vidéos pour l'utilisation*

_Objectif_
Existe-t-il des vidéos pour apprendre à se servir de ce projet ?

_Actions_
- Analyse des vidéos référencées depuis le site web du projet
- Analyse des vidéos dédiées au projet et disponibles sur internet 
      
_Notation_
Présence de vidéos sur le site du projet
Nombre de vidéos avec le nom du projet dans le titre

**** Critère *Littératures*

_Objectif_
Existe-t-il des ouvrages sur le logiciel ?

_Actions_
- Rechercher sur internet la publication de livres dédiés entièrement ou partiellement au logiciel   
      
_Notation_
Nombre de livres publiés dans la langue du pays d'acceuil sur le logiciel

**** Critère *Recherche académique dédiée*

_Objectif_
Existe-t-il des papiers académiques dédiés à ce logiciel ?

_Actions_
- Rechercher sur internet et plus particulièrement sur les moteurs de recherche dédiés à la recherche académique la publication de travaux dont le logiciel est l'objet principal
      
_Notation_
Nombre de papiers académiques dédiés à ce logiciel  

**** Critère *Recherche académique favorisée*

_Objectif_
Existe-t-il des papiers académiques impliquant ce logiciel ?

_Actions_
- Rechercher sur internet et plus particulièrement sur les moteurs de recherche dédiés à la recherche académique la publication de travaux mentionnant le logiciel 
      
_Notation_
Nombre de papiers académiques mentionnant ce logiciel 

*** Catégorie *Opérationnel*

_Enjeux_

- Est-ce qu'il est facile de se servir de ce logiciel ? De son installation par un administrateur à son utilisation par des clients ?
    
_Description_

Dans cette catégorie, l'objectif est de déterminer si le logiciel est facilement utilisable dans son usage supposé.
On s'intéressera à l'ensemble du cycle de l'utilisation : installation locale, déploiement en production, configuration,
utilisation courante, migration, suppression. 

**** Critère *Facilité à l'installation locale*

_Objectif_
Est-ce que le logiciel est facile à installer localement ? 

_Actions_
- Lire la documentation d'installation et évaluer la facilité d'installation 
- Si souhait d'aller plus loin, installer le logiciel localement
- Si absence de documentation, ou si pertinent, réaliser une interview auprès de personnes ayant réalisées une installation locale du logiciel 
      
_Notation_
Note entre 1 et 5 selon la facilité d'installation 

_Liens_
Présence d'une documentation d'installation 

**** Critère *Facilité au déploiement en production*

_Objectif_
Est-ce que le logiciel est facile à déployer en production ? 

_Actions_
- Lire la documentation de déploiement et évaluer sa facilité 
- Si souhait d'aller plus loin, installer le logiciel sur une infrastructure semblable à la cible
- Si absence de documentation, ou si pertinent, réaliser une interview auprès de personnes ayant réalisées un déploiement du logiciel 
      
_Notation_
Note entre 1 et 5 selon la facilité de déploiement 

_Liens_
Présence d'une documentation de déploiement de production

**** Critère *Facilité à la configuration*

_Objectif_
Est-ce que le logiciel est facile à configurer ? 

_Actions_
- Lire la documentation liée à la configuration et évaluer sa facilité
- Si souhait d'aller plus loin, configurer le logiciel localement
- Si absence de documentation, ou si pertinent, réaliser une interview auprès de personnes ayant réalisées un déploiement et donc configurées le logiciel  
      
_Notation_
Note entre 1 et 5 selon la facilité de configuration

_Liens_
Présence d'une documentation de configuration

**** Critère *Facilité avec les données*

_Objectif_
Est-ce que les données nécessaires à l'utilisation du logiciel sont faciles à employer ? 

_Actions_
- Lire la documentation liée aux données nécessaires pour faire fonctionner le logiciel
- Si souhait d'aller plus loin, configurer le logiciel localement avec les bonnes données
- Si absence de documentation, ou si pertinent, réaliser une interview auprès de personnes ayant réalisées un déploiement et donc configurées le logiciel avec les bonnes données  
- Évaluer le nombre de données nécessaires, leur ouverture et facilité d'accès
        
_Notation_
0 : au moins une donnée est fermée
Note entre 1 et 5 selon la facilité d'accès aux données 

**** Critère *Facilité à l'utilisation*

_Objectif_
Est-ce que le logiciel est facile à utiliser dans son usage supposé ? 

_Actions_
- Lire la documentation d'utilisation et évaluer sa facilité 
- Si souhait d'aller plus loin, tester le logiciel localement
- Si absence de documentation, ou si pertinent, réaliser une interview auprès de personnes utilisant le logiciel
      
_Notation_
Note entre 1 et 5 selon la facilité d'utilisation

_Liens_
Présence d'une documentation d'utilisation

**** Critère *Facilité à la migration vers le logiciel*

_Objectif_
Est-ce qu'il est facile de migrer vers ce logiciel ? 

_Actions_
- Évaluer la démarche de migration si elle est documentée 
- Si souhait d'aller plus loin, migrer localement
- Si absence de documentation, ou si pertinent, réaliser une interview auprès de personnes ayant réalisées une migration vers ce logiciel
      
_Notation_
Note entre 1 et 5 selon la facilité de migration 

_Liens_
Migration 

**** Critère *Facilité à la migration depuis le logiciel*

_Objectif_
Est-ce qu'il est facile de migrer depuis ce logiciel ? 

_Actions_
- Évaluer la démarche de migration si elle est documentée 
- Si souhait d'aller plus loin, migrer localement
- Si absence de documentation, ou si pertinent, réaliser une interview auprès de personnes ayant réalisées une migration depuis ce logiciel
      
_Notation_
Note entre 1 et 5 selon la facilité de migration 

_Liens_
Migration 

**** Critère *Facilité à la suppression*

_Objectif_
Est-ce que le logiciel est facile à supprimer ? 

_Actions_
- Lire la documentation de suppresion et évaluer sa facilité
- Si souhait d'aller plus loin, supprimer le logiciel localement
- Si absence de documentation, ou si pertinent, réaliser une interview auprès de personnes ayant réalisées une suppression du logiciel 
      
_Notation_
Note entre 1 et 5 selon la facilité de suppression

_Liens_
Présence d'une documentation de suppression

*** Catégorie *Attractivité*

_Enjeux_

- Est-ce que le logiciel est attractif ? 
    
_Description_

Dans cette catégorie, l'objectif est d'évaluer l'attractivité du logiciel du point de vue des utilisateurs
et des développeurs.
L'attractivité est subjective mais c'est un domaine très présent dans le choix d'un logiciel et
dans la conduite du changement. 

**** Critère *Attractivité du design*

_Objectif_
Est-ce que le design du logiciel est apprécié par les utilisateurs ?

_Actions_
- Interviewer des utilisateurs actuels et/ou cibles

_Notation_
Note entre 1 et 5 selon l'attractivité du design

**** Critère *Attractivité de la pile technologique*

_Objectif_
Est-ce que la pile technologique est attractive du point de vue des développeurs ? 

_Actions_
- Analyse des technologies employées au regards des usages dans le secteur.

_Notation_
Note entre 1 et 5 selon l'attractivité de la pile technologique  

*** Catégorie *Documentation*

_Enjeux_

- Est-ce que le projet est bien documenté ? La qualité d'une documentation assure une prise en main
  et des contribtions plus aisées. Elle peut également montrer si les mainteneurs ont favorisé
  l'ouverture du projet.   
    
_Description_

Dans cette catégorie, l'objectif est d'identifier les documentations disponibles et d'apprécier leur qualité. 
En ce qui concerne leur qualité, on s'intéressera principalement aux informations disponibles, leur mise à jour
si possible et la qualité de la rédaction. 

_Liens_

- Si le projet est bien documenté, on pourra regarder d'autres crtières.
- Si le projet est mal documenté, on prêtera plus d'attention à la maintenabilité du code et aux contributions extérieures. 

**** Critère *Readme*

_Objectif_
Est-ce qu'il y a un README qui introduit clairement et rapidement la raison d'être du logiciel ?

_Actions_
- Chercher le README du projet.
- Déterminer sa position. La position standard est la racine du dépôt.
- Déterminer son nom. Le nom standard est README.
- Déterminer son format. Le format standard est le markdown.
- Vérifier la bonne description du projet. 

_Notation_
Note entre 0 et 20 selon le barême suivant :
- 0 : absence de README
- +2 : présence d'un README
- +3 : position standard
- +3 : nom standard
- +2 : format standard
- +5 : description claire du projet
- +5 : description au début du fichier
  
**** Critère *Documentation d'utilisation*

_Objectif_
Est-ce qu'il y a une documentation d'utilisation bien qualifiée qui permette d'utiliser le logiciel ?

_Actions_
- Chercher la documentation d'utilisation du projet.
- Évaluer sa position par rapport au projet. La position standard est dans un dossier de documentation à la racine. 
- Vérifier la bonne description de l'utilisation du projet : informations suffisantes et claires (jargon limité et explicité).
- Déterminer son format. Le format standard des fichiers est le markdown, avec des images en jpeg ou png ou svg.
- Évaluer la fluidité de la navigation au sein de la documentation. 
- Vérifier si elle est bien indiquée dans le README. 
- Vérifier si elle est bien à jour.
- Vérifier si elle est régulièrement mise à jour. 
- Évaluer sa diffusion et l'accessibilité de cette dernière. 
  
_Notation_
Note entre 0 et 30 selon le barême suivant :
- 0 : absence de documentation
- +2 : présence d'une documentation
- +3 : facilité à trouver la documentation
- +1 : documentation pointée dans le README
- +3 : position standard
- +2 : format standard
- +5 : informations suffisantes et claires
- +2 : navigation fluide
- +5 : informations à jour
- +2 : informations régulièrement mises à jour
- +2 : diffusions autres que les fichiers du projet
- +3 : diffusions accessibles

**** Critère *Documentation de déploiement*

_Objectif_
Est-ce qu'il y a une documentation de déploiement bien qualifiée qui facilite la mise en production du logiciel ?

_Actions_
- Chercher la documentation de déploiement du projet.
- Évaluer sa position par rapport au projet. La position standard est dans un dossier de documentation à la racine. 
- Vérifier les informations liées au déploiement du logiciel : informations suffisantes et claires (jargon limité et explicité).
- Déterminer son format. Le format standard des fichiers est le markdown, avec des images en jpeg ou png ou svg.
- Évaluer la fluidité de la navigation au sein de la documentation. 
- Vérifier si elle est bien indiquée dans le README. 
- Vérifier si elle est bien à jour.
- Vérifier si elle est régulièrement mise à jour. 
- Évaluer sa diffusion et l'accessibilité de cette dernière. 
  
_Notation_
Note entre 0 et 30 selon le barême suivant :
- 0 : absence de documentation
- +2 : présence d'une documentation
- +3 : facilité à trouver la documentation
- +1 : documentation pointée dans le README
- +3 : position standard
- +2 : format standard
- +5 : informations suffisantes et claires
- +2 : navigation fluide
- +5 : informations à jour
- +2 : informations régulièrement mises à jour
- +2 : diffusions autres que les fichiers du projet
- +3 : diffusions accessibles

**** Critère *Documentation de configuration*

_Objectif_
Est-ce qu'il y a une documentation de configuration bien qualifiée qui facilite la configuration du logiciel ?

_Actions_
- Chercher la documentation de configuration du projet.
- Évaluer sa position par rapport au projet. La position standard est dans un dossier de documentation à la racine. 
- Vérifier les informations liées à la configuration du logiciel : informations suffisantes et claires (jargon limité et explicité).
- Déterminer son format. Le format standard des fichiers est le markdown, avec des images en jpeg ou png ou svg.
- Évaluer la fluidité de la navigation au sein de la documentation. 
- Vérifier si elle est bien indiquée dans le README. 
- Vérifier si elle est bien à jour.
- Vérifier si elle est régulièrement mise à jour. 
- Évaluer sa diffusion et l'accessibilité de cette dernière. 
  
_Notation_
Note entre 0 et 30 selon le barême suivant :
- 0 : absence de documentation
- +2 : présence d'une documentation
- +3 : facilité à trouver la documentation
- +1 : documentation pointée dans le README
- +3 : position standard
- +2 : format standard
- +5 : informations suffisantes et claires
- +2 : navigation fluide
- +5 : informations à jour
- +2 : informations régulièrement mises à jour
- +2 : diffusions autres que les fichiers du projet
- +3 : diffusions accessibles

**** Critère *Contributing*

_Objectif_
Est-ce qu'il y a une documentation pour les contributions bien qualifiée qui facilite les contributions au logiciel ?

_Actions_
- Chercher le CONTRIBUTING du projet. 
- Évaluer sa position par rapport au projet. La position standard est un fichier à la racine du projet.
- Déterminer son format. Le format standard est le markdown.
- Vérifier les informations du CONTRIBUTING : attentes claire, et règles claires et applicables largement. 
- Vérifier si elle est bien indiquée dans le README. 
- Vérifier si elle est bien à jour.
- Vérifier si elle est régulièrement mise à jour. 
  
_Notation_
Note entre 0 et 20 selon le barême suivant :
- 0 : absence de CONTRIBUTING
- +2 : présence d'un CONTRIBUTING
- +3 : facilité à trouver le CONTRIBUTING
- +1 : documentation pointée dans le README
- +3 : position standard
- +2 : format standard
- +5 : règles suffisantes et claires
- +2 : informations à jour
- +2 : informations régulièrement mises à jour

**** Critère *Documentation des tests*

_Objectif_
Est-ce qu'il y a une documentation liée aux tests bien qualifiée pour faciliter la reproduction des tests du logiciel ?

_Actions_
- Chercher la documentation liée aux tests du projet.
- Évaluer sa position par rapport au projet. La position standard est dans un dossier de documentation à la racine. 
- Vérifier les informations liées aux tests du logiciel : informations suffisantes et claires pour jouer et modifier les tests.
- Déterminer son format. Le format standard des fichiers est le markdown, avec des images en jpeg ou png ou svg.
- Évaluer la fluidité de la navigation au sein de la documentation. 
- Vérifier si elle est bien indiquée dans le CONTRIBUTING. 
- Vérifier si elle est bien à jour.
- Vérifier si elle est régulièrement mise à jour. 
- Évaluer sa diffusion et l'accessibilité de cette dernière. 
  
_Notation_
Note entre 0 et 30 selon le barême suivant :
- 0 : absence de documentation
- +2 : présence d'une documentation
- +3 : facilité à trouver la documentation
- +1 : documentation pointée dans le CONTRIBUTING
- +3 : position standard
- +2 : format standard
- +5 : informations suffisantes et claires
- +2 : navigation fluide
- +5 : informations à jour
- +2 : informations régulièrement mises à jour
- +2 : diffusions autres que les fichiers du projet
- +3 : diffusions accessibles

**** Critère *Documentation de la distribution*

_Objectif_
Est-ce qu'il y a une documentation pour créer des artefacts de distribution du logiciel et les rendre disponible ?

_Actions_
- Chercher la documentation de la diffusion du projet.
- Évaluer sa position par rapport au projet. La position standard est dans un dossier de documentation à la racine. 
- Vérifier les informations liées à la diffusion du logiciel : informations suffisantes et claires (jargon limité et explicité).
- Déterminer son format. Le format standard des fichiers est le markdown, avec des images en jpeg ou png ou svg.
- Évaluer la fluidité de la navigation au sein de la documentation. 
- Vérifier si elle est bien indiquée dans le README. 
- Vérifier si elle est bien à jour.
- Vérifier si elle est régulièrement mise à jour. 
- Évaluer sa diffusion et l'accessibilité de cette dernière. 
  
_Notation_
Note entre 0 et 30 selon le barême suivant :
- 0 : absence de documentation
- +2 : présence d'une documentation
- +3 : facilité à trouver la documentation
- +1 : documentation pointée dans le CONTRIBUTING
- +3 : position standard
- +2 : format standard
- +5 : informations suffisantes et claires
- +2 : navigation fluide
- +5 : informations à jour
- +2 : informations régulièrement mises à jour
- +2 : diffusions autres que les fichiers du projet
- +3 : diffusions accessibles

**** Critère *Changelog*

_Objectif_
Est-ce qu'il y a un CHANGELOG qui introduit clairement les versions et leurs nouveautés pour le logiciel ?

_Actions_
- Chercher le CHANGELOG du projet.
- Déterminer sa position. La position standard est la racine du dépôt.
- Déterminer son nom. Le nom standard est CHANGELOG.
- Déterminer son format. Le format standard est le markdown.
- Vérifier la bonne description des versions. 

_Notation_
Note entre 0 et 20 selon le barême suivant :
- 0 : absence de CHANGELOG
- +2 : présence d'un CHANGELOG
- +3 : position standard
- +3 : nom standard
- +2 : format standard
- +5 : contenu à jour
- +5 : descriptions des anciennes versions

**** Critère *Cohérence de la documentation*

_Objectif_
Est-ce que l'ensemble des documentations est cohérente ?

_Actions_
- Analyser la cohérence globale de la documentation 

_Notation_
Note entre 1 et 5 selon la cohérence globale de la documentation 

**** Critère *Traduction de la documentation*

_Objectif_
Est-il possible de traduire la documentation en différentes langues ?

_Actions_
- Analyser la documentation

_Notation_
- 0 : si la traduction n'a pas été implémentée
- +1 : si la traduction a été implémentée 

*** Catégorie *Distribution*

_Enjeux_

- Sous quelles formes et modalités est distribué le code afin d'en facliter l'usage ?  

_Description_

Dans cette catégorie, on cherche à identifier les modes de distribution du logiciel. On se demandera
si des paquets sont proposés, des binaires dans le cas de certains langages. Plus généralement,
on regardera si les standards de distributions sont respectés pour un langage donné. 

**** Critère *Présence de releases*

_Objectif_
Est-ce que le projet référence des versions du code utilisables en production, appelées généralement releases ? 

_Actions_
- Analyse du dépôt pour identifier la présence de releases 

_Notation_
0 : absence de releases
+1 : Présence de releases

**** Critère *Présence de release-candidates*

_Objectif_
Est-ce que le projet référence des versions du code pour tester les nouvelles fonctionnalités à venir, appelées généralement release-candidates ? 

_Actions_
- Analyse du dépôt pour identifier la présence de release-candidates

_Notation_
0 : absence de release-candidates
+1 : Présence de release-candidates

**** Critère *Présence de distributions*

_Objectif_
Est-ce que le code est distribué sous une autre forme que ces sources (ex. compilation, paquets, images) ?

_Actions_
- Analyse du dépôt
- Analyse du site web du projet
- Identifier le nombre de distributions

_Notation_
0 : aucune distribution
+1 : si au moins une distribution
+2 : si plusieurs distribution

**** Critère *Standardisation de la distribution*

_Objectif_
Est-ce que le code est distribué selon les standards des langages du projet et la finalité du projet ? 

_Actions_
- Se renseigner sur les standards de distribution des langages impliqués et le type de projet étudié

_Notation_
Note entre 0 et 5 pour le respect des standards

**** Critère *Fréquence des versions majeures*

_Objectif_
Est-ce que les releases comportent souvent des changements cassants ?

_Actions_
- Analyse de la documentation des changements (ex. changelog.md).

_Notation_
0 : si changements cassants plusieurs fois par an
+1 : si changements cassants une fois par an
+4 : si maintenance d'une version majeure pendant au moins 1 an

**** Lier au critère *Documentation de la distribution*
**** Lier au critère *Maintenance de la distribution*
** Domaine *Technique*

_Enjeux_

- Est-ce que le code est à la hauteur des standards et normes du milieu ? Et plus précisement de mes attentes ?

_Description_

Dans ce domaine, l'objectif est d'évaluer la qualité du code selon plusieurs axes tels que
la maintenabilité, la testabilité, la sécruité et bien d'autres. 

*** Catégorie *Disponibilité*

_Enjeux_

- Est-ce que l'ensemble du code est bien disponible selon les standards afin de permettre la collaboration ?

_Description_

Dans cette catégorie, l'objectif est d'évaluer la disponibilité du code et ses moyens d'accès.
On s'intéressera notamment à l'hébergement du code et son système de gestion des versions.

**** Critère *Contrôle des versions*
Le dépôt de code est sous contrôle de version ? Analyse du dépôt.

_Objectif_


_Actions_


_Notation_

**** Critère *Outil de contrôle des versions*
Est-ce que l'outil de gestion des version est un outil standard et libre ? Analyse du dépôt.

_Objectif_


_Actions_


_Notation_

**** Critère *Code des releases public*
Le code est public ? C'est-à-dire disponible via une URL, sans inscription ou paiement.

_Objectif_


_Actions_


_Notation_

**** Critère *Code des développements public*
Toutes les versions du code sont publiques, pas uniquement certaines releases ? Analyse du dépot et des informations disponibles.

_Objectif_


_Actions_


_Notation_

**** Critère *Numérotation des versions*
Quel format de numérotation de version est employé ? Analyse du dépôt.

_Objectif_


_Actions_


_Notation_

**** Critère *Découpage des dépôts*
Est-ce que le code est dans un unique dépôt ou plusieurs ? Si plusieurs, est-ce que découpage est explicité ?

_Objectif_


_Actions_


_Notation_

**** Critère *Liberté d'installation*
Est-ce que le code est installable uniquement avec des logiciels libres ? Analyse de la documentation, tests manuels.

_Objectif_


_Actions_


_Notation_

**** Critère *Liberté d'exécution*
Est-ce que le code est exécutable uniquement avec des logiciels libres ? Analyse de la documentation, tests manuels.

_Objectif_


_Actions_


_Notation_

**** Critère *Liberté de modification*
Est-ce que le code est modifiable uniquement avec des logiciels libres ? Analyse de la documentation, tests manuels.

_Objectif_


_Actions_


_Notation_

**** Critère *Liberté de distribution*
Est-ce que le code est distribuable uniquement avec des logiciels libres ? Analyse de la documentation, tests manuels.

_Objectif_


_Actions_


_Notation_

**** Lien avec l'analyse de la conformité juridique du code
**** Lien avec l'analyse de la conformité juridique des dépendances 

*** Catégorie *Maintenabilité*

_Enjeux_

- Est-ce que le code est maintenable ? Facilement corrigeable ? Quel est l'état de sa dette technique ?

_Description_

Dans cette catégorie, l'objectif est d'évaluer la maintenabilité du code source disponible.
Pour cela, on s'intéressera particulièrement à la complexité du code et aux standards
des langages employés. 

**** Critère *Pile technologique*
Est-ce que la pile technologique est cohérente et adaptée aux services rendus ? Nombre de langages utilisés dans le projet et pourcentage de chacun.

_Objectif_


_Actions_


_Notation_

**** Critère *Complexité du code*
Est-ce que le code est complexe ? Mesure automatique

_Objectif_


_Actions_


_Notation_

**** Critère *Organisation du code*
Est-ce que le code est correctement organisé ? Mesure automatique et analyse manuelle des commentaires et du nom des variables, des fonctions, de l'arborescence des fichiers. Cela permet de voir concrétement si le code est analysable.

_Objectif_


_Actions_


_Notation_

**** Critère *Commentaires du code*
Est-ce que le code est correctement commenté ? Mesure automatique et analyse manuelle des commentaires et du nom des variables, des fonctions, de l'arborescence des fichiers. Cela permet de voir concrétement si le code est analysable.

_Objectif_


_Actions_


_Notation_

**** Critère *Standards du code*
Est-ce que le code suit une norme ou un standard des langages utilisés ? Analyse automatique du code avec un linter.

_Objectif_


_Actions_


_Notation_

**** Critère *Architecture du code*
Quelle est l'architecture logicielle retenue ? Est-elle modulaire ? Peut-on identifier des parties complexes ? Analyse automatique et manuelle du code et de la documentation développeur. Cela permet de voir si le code est modifiable.

_Objectif_


_Actions_


_Notation_

**** Critère *Maintenance des distributions*
Est-ce que chaque distribution est contruite selon un processus documenté et reproductible avec des logiciels standards et libres ? Analyse du ou des dépôts concernés.

_Objectif_


_Actions_


_Notation_

**** Lien avec l'activité de la communauté pour savoir si le code facilement modifiable, stable et mature dans cette configuration technologique.
**** Lien avec l'attractivité de la pile technologique. 

*** Catégorie *Dépendances*

_Enjeux_

- Est-ce que les dépendances sont maintenues et compatibles avec ma situation ?

_Description_

Dans cette catégorie, l'objectif est d'évaluer les dépendances du projet pour prendre
du recul sur les dépendances que je vais accepter. Il s'agira notamment de voir
si les dépendances sont bien libres et maintenues. 

**** Critère *Dépendances d'exécution*
Quelles sont les dépendances liées à l'exécution et sont-elles libres ? Identification d'un arbre de dépendances le plus complet possible avec nom, url, version, date de release, licence.

_Objectif_


_Actions_


_Notation_

**** Critère *Dépendances de développement*
Quelles sont les dépendances liées aux développements et sont-elles libres ? Identification d'un arbre de dépendances le plus complet possible avec nom, url, version, date de release, licence.

_Objectif_


_Actions_


_Notation_

**** Critère *Dépendances de la documentation*
Quelles sont les dépendances liées à la documentation et sont-elles libres ? Identification d'un arbre de dépendances le plus complet possible avec nom, url, version, date de release, licence.

_Objectif_


_Actions_


_Notation_

**** Critère *Dépendances des distributions*
Quelles sont les dépendances liées aux distributions et sont-elles libres ? Identification d'un arbre de dépendances le plus complet possible avec nom, url, version, date de release, licence.

_Objectif_


_Actions_


_Notation_

**** Critère *Mise à jour des dépendances*
Est-ce que les dépendances sont à jour ? Comparaison de la version utilisée avec celle conseillée par les mainteneurs de la dépendance, mise en corrélation avec la date.

_Objectif_


_Actions_


_Notation_

**** Lien avec l'analyse de la conformité juridique des dépendances

*** Catégorie *Testabilité*

_Enjeux_

- Est-ce que le code est bien testé ? Est-ce que les tests disponibles encouragent les contributions ?
  Cela est généralement signe d'une rigueur dans les développements.

_Description_

Dans cette catégorie, l'objectif est d'évaluer la testabilité du code source. On sera
notamment attentif à la couverture des tests, leur automatisation et leur documentation. 

**** Critère *Présence de tests*
Présence de tests maintenus et automatisés lors d'une contribution

_Objectif_


_Actions_


_Notation_

**** Critère *Couverture des tests*
Couverture des tests affichée

_Objectif_


_Actions_


_Notation_

**** Critère *Automatisation des tests*
Est-ce que les tests sont exécutables automatiquement ? 

_Objectif_


_Actions_


_Notation_

**** Critère *Tests en continue*
Est-ce que les tests sont joués automatiquement lors d'une contribution ?

_Objectif_


_Actions_


_Notation_

**** Lien avec la documentation claire pour effectuer et mettre à jour les tests

*** Catégorie *Adaptabilité*

_Enjeux_

- Est-ce que le code s'adapte facilement à des environnements différents ?
- Est-ce que son architecture de déploiement correspond à mes attentes et possibilités ?

_Description_

Dans cette catégorie, l'objectif est de déterminer si le code s'adapte à des situations
et des environnements différents. 

**** Critère *Portabilité du code*
Est-ce que le code est portable ? Analyse de la documentation et/ou du code.

_Objectif_


_Actions_


_Notation_

**** Critère *Scalabilité du code*
Est-ce que le logiciel est scalable ? Analyse de la documentation et/ou du code.

_Objectif_


_Actions_


_Notation_

**** Critère *Déployabilité du code*
Pour quels environnements de déploiement a-t-il été pensé ? Analyse de la documentation et/ou du code.

_Objectif_


_Actions_


_Notation_

**** Lien avec la configuration de déploiement

*** Catégorie *Sécurité*

_Enjeux_

- Est-ce que les développements suivent une politique sécuritaire qui me convient ?

_Description_

Dans cette catégorie, l'objectif est d'évaluer les efforts déployés en vue de la bonne
sécurité de la diffusion du code et des instances utilisées. 

_Pour aller plus loin_
Suivre les critères de l'openSSF 

**** Critère *Signalement des failles*
Présence d'un processus de signalement des vulnérabilités sur le dépôt du projet : temps de réponse
Absence de vulnérabilités remontées et non corrigées dans un laps de temps raisonnable en lien avec la criticité des vulnérabilités

_Objectif_


_Actions_


_Notation_

**** Critère *Recherches de vulnérabilités*
Présence d'analyses statiques et dynamiques du code adaptées aux langages et incluant la recherche de vulnérabilité connues pour ces langages

_Objectif_


_Actions_


_Notation_

**** Critère *Absence de données sensibles*
Absence de données sensibles dans les dépôts de code versionnés (ex. mot de passe, certificats privés)

_Objectif_


_Actions_


_Notation_

**** Critère *Bonnes pratiques cryptographiques*
Le code suit les bonnes pratiques de base en cryptographie : voir les critères openSSF

_Objectif_


_Actions_


_Notation_

**** Critère *Distributions sécurisées*
La livraison du code est sécurisée contre les attaques man-in-the-middle : voir les critères openSSF

_Objectif_


_Actions_


_Notation_

**** Critère *Données sécurisées*
Les données liées au projet sont stockées sur des plateformes sécurisées
Les données du projet peuvent être transmises de façon sécurisée

_Objectif_


_Actions_


_Notation_

**** Critère *Dépendances sécurisées*
Les dépendances du projet sont vérifiées avant d'être incorporées au projet

_Objectif_


_Actions_


_Notation_

**** Critère *Documentation des corrections de sécurité*
Documentation des vulnérabilités corrigées dans la publication d'une release

_Objectif_


_Actions_


_Notation_

*** Catégorie *Fiabilité*

_Enjeux_

- Est-ce que le logiciel démontre une fiabilité et une robustesse nécessaires pour mon utilisation ?

_Description_

Dans cette catégorie, l'objectif est d'évaluer la fiabilité du logiciel en condition opérationelles. 

**** Critère *Maturité du code*
Est-ce que le code est suffisamment mature pour être déployé en production à l'échelle qui est la mienne ? Interviews d'utilisateurs.

_Objectif_


_Actions_


_Notation_

**** Critère *Robustesse du logiciel*
Est-ce que le logiciel est robuste ? Tests de tolérance aux fautes, de montée en charge et de stress

_Objectif_


_Actions_


_Notation_

**** Critère *Reprise sur erreur*
Quelles sont les modalités de rétablissement, les pertes si arrêt du logiciel ? Analyse des crashs : taux, raisons, rapidité et facilité de rétablissement

_Objectif_


_Actions_


_Notation_

*** Catégorie *Efficacité*

_Enjeux_

- Est-ce que le logiciel utilise efficacement les ressources mis à sa disposition ? Est-ce que les ressources dont je dispose permettront de faire fonctionner correctement le logiciel ?

_Description_

Dans cette catégorie, l'objectif est d'évaluer l'efficacité du logiciel en terme de performances
et de consommation des ressources. 

**** Critère *Performances*
Analyse des performances au chargement et à l'exécution dans un contexte donné

_Objectif_


_Actions_


_Notation_

**** Critère *Frugalité*
Analyse de la consommation des ressources au chargement et à l'exécution dans un contexte donné

_Objectif_


_Actions_


_Notation_

*** Catégorie *Interopérabilité*

_Enjeux_

- Est-ce que le logiciel permet l'interopérabilité ou isole les utilisateurs ?
  Que ce soit au niveau des données ou des communications.

_Description_

Dans cette catégorie, l'objectif est d'évaluer l'isolement ou l'ouverture engendrée
par l'adoption de ce logiciel. 

**** Critère *Interopérabilité des communications*
Est-ce que les communications du logiciels suivent des standards ou des normes ouvertes ?

_Objectif_


_Actions_


_Notation_

**** Critère *Interopérabilité des données*
Est-ce que des données sont nécessaires pour faire fonctionner le logiciel ?
Est-ce que les données d'entrée et de sortie sont ouvertes, accessibles dans un format ouvert et standard ?

_Objectif_


_Actions_


_Notation_

*** Catégorie *Eco-responsable*

_Enjeux_

- Est-ce que le logiciel a été codé de manière à réduire son empreinte écologique ?

_Description_

Dans cette catégorie, l'objectif est d'évaluer l'éco-conception du logiciel. 

**** Critère *RGESN*
Évaluation des critères du RGESN

_Objectif_


_Actions_


_Notation_

** Domaine *Communautés*

_Enjeux_

- Est-ce que les communautés sont identifiées et adaptées à mes objectifs ?

_Description_

Dans ce domaine, l'objectif est de découvrir et qualifier les communautés qui existent autours du logiciel.
Un logiciel libre est le reflet de ses communautés. Identifier ces dernières est nécessaire pour s'y intégrer de manière
durable et réfléchie. On pourra chercher à vérifier que les communautés sont ouvertes et résilientes par exemple. 

_Liens_
- Si les communautés ont une dimension inadaptée à mon projet, je peux évaluer les domaines techniques et économiques. 

_Pour aller plus loin_
Voir le projet CHAOSS. 

*** Catégorie *Personnes*

Cartographier les communautés 
Comment qualifier les communautés impliquées dans le projet ? Quelles sont leurs interactions entre elles et avec l'extérieur ? Est-ce qu'on retrouve bien des communautés utilisatrices et contributrices a minima ?

**** Critère *Utilisateurs*
Nombre et qualité d'utilisateurs

_Objectif_


_Actions_


_Notation_

**** Critère *Références*
Nombre et qualité des références

_Objectif_


_Actions_


_Notation_

**** Critère *Contributeurs*
Nombre et qualité de contributeurs au projet : localisation

_Objectif_


_Actions_


_Notation_

**** Critère *Développeurs compétents en sécurité*
Présence d'au moins un développeur principal qui sait comment concevoir un logiciel sécurisé et potentiellement d'un autre qui connait les types courants d'erreurs qui conduisent à des vulnérabilités dans ce genre de logiciel, ainsi qu'au moins une méthode pour contrer ou atténuer chacun d'eux

_Objectif_


_Actions_


_Notation_

**** Critère *Contributeurs occasionnels*
Nombre de contributeurs occasionnels et type de contributions

_Objectif_


_Actions_


_Notation_

**** Critère *Contributeurs inactifs*
Nombre de contributeurs inactifs : actifs régulièrement pendant une grande période mais devenus inactifs

_Objectif_


_Actions_


_Notation_

**** Critère *Mentorat*
Nombre et qualité des mentors

_Objectif_


_Actions_


_Notation_

**** Critère *Gouvernants*
Nombre et qualité des membres de la gouvernance : diversité

_Objectif_


_Actions_


_Notation_

**** Critère *Organismes*
Nombre et qualité des organismes impliqués financièrement ou en nature : mesure du % de contributions de chaque entité

_Objectif_


_Actions_


_Notation_

**** Critère *Fournisseurs*
Nombre et qualité des fournisseurs

_Objectif_


_Actions_


_Notation_

**** Critère *Supports*
Nombre et qualité des supports

_Objectif_


_Actions_


_Notation_

**** Critère *Fondations*
Appartenance à une fondation et qualification de cette dernière : rôle principal, gouvernance, périmètre technique, structure juridique.

_Objectif_


_Actions_


_Notation_

**** Critère *Consortium*
Appartenance à un consortium et qualification de ce dernier : rôle principal, gouvernance, périmètre technique, structure juridique.

_Objectif_


_Actions_


_Notation_

**** Critère *Autres communautés*
Existance d'autres type de personnes impliquées dans le projet, lien avec les autres communautés

_Objectif_


_Actions_


_Notation_

*** Catégorie *Activités*

Acivités actuelles de la communauté
Est-ce que le projet est actif ? quelles sont les activités actuelles des communautés ?

**** Critère *Date de dernière release*
Date de la dernière release

_Objectif_


_Actions_


_Notation_

**** Critère *Nombre de release*
Nombre de releases : total, fréquence, évolution

_Objectif_


_Actions_


_Notation_

**** Critère *Contributions sur le code*
Nombre des contributions sur le code : totales, évolution et sur la période actuelle

_Objectif_


_Actions_


_Notation_

**** Critère *Traitement des changements*
Mesure du ratio de demandes de changement prises en compte : nb CR traité / nb CR total. Permet de savoir si le projet arrive à traiter, souhaite traiter, etc...

_Objectif_


_Actions_


_Notation_

**** Critère *Contributions en tickets*
Nombre de contributions en tickets : totales, évolution et sur la période actuelle, nombre ouvertes sur la période actuelle

_Objectif_


_Actions_


_Notation_

**** Critère *Temps de réponse à un ticket*
Mesure du temps de réponse à un ticket

_Objectif_


_Actions_


_Notation_

**** Critère *Temps de résolution d'un bug remonté*
Mesure du temps de résolution d'un bug remonté

_Objectif_


_Actions_


_Notation_

**** Critère *Temporalité des contributions*
Date et heure des contributions. Permet d'avoir une idée de la provenance des contributions.

_Objectif_


_Actions_


_Notation_

*** Catégorie *Communications*

Sur quels canaux échangent généralement les communautés ?

**** Critère *Canaux de communication*
Identification des canaux de communication par communautés : liste de mail, réseaux sociaux, chats, etc...

_Objectif_


_Actions_


_Notation_

**** Critère *Activités sur les canaux de communication*
Qualification des communications en nombre de personnes par mois

_Objectif_


_Actions_


_Notation_

**** Critère *Temps de réponse sur les canaux*
Mesure du temps de réponse moyen pour une sollicitation : mail, issue, etc...

_Objectif_


_Actions_


_Notation_

*** Catégorie *Rencontres*

Quand et comment se retrouvent spécifiquement les communautés ?

**** Critère *Existence de rencontres*
Typologie et régularité des événements liés aux communautés

_Objectif_


_Actions_


_Notation_

**** Critère *Popularité des rencontres*
Nombre de personnes présentes à ces événements

_Objectif_


_Actions_


_Notation_

**** Critère *Lieux des rencontres*
Localisation des événements

_Objectif_


_Actions_


_Notation_

**** Critère *Sécurité des rencontres*
Sûreté des événements

_Objectif_


_Actions_


_Notation_

**** Critère *Culture des rencontres*
Présence d'un code de conduite pour les événements

_Objectif_


_Actions_


_Notation_

**** Critère *Accessibilité des rencontres*
Analyse de l'accessibilité des événements
Analyse de l'accueil des familles dans les événements 

_Objectif_


_Actions_


_Notation_

**** Critère *Internationalisation des rencontres*
Analyse de la prise en compte de différentes langues 
Analyse de la prise en compte des fuseaux horaires pour les horaires des événements

_Objectif_


_Actions_


_Notation_

*** Catégorie *Culture*

Est-ce que les valeurs des communautés correspondent aux miennes ? Est-ce que les communautés sont accueillantes ? organisées ?

**** Critère *Code de conduite*
Présence d'un code de conduite et d'un contact pour reporter des abus

_Objectif_


_Actions_


_Notation_

**** Critère *Transparence des échanges*
Transparence des lieux d'échanges

_Objectif_


_Actions_


_Notation_

**** Critère *Gestion de conflit*
Analyse de la gestion de conflits : processus documenté, présence d'un médiateur, adresse mail de contact, interviews

_Objectif_


_Actions_


_Notation_

**** Critère *Inclusions*
Analyse de la prise en compte de la diversité, l'équité et l'inclusion, de la qualité de vie des contributeurs

_Objectif_


_Actions_


_Notation_

**** Critère *Reconnaissance*
Reconnaissance des contributeurs et sponsors

_Objectif_


_Actions_


_Notation_

**** Critère *Organisation des échanges*
Analyse des labels utilisés pour les issues. Permet de voir l'organisation et l'accueil des nouveaux.

_Objectif_


_Actions_


_Notation_

**** Critère *Sécurité des échanges*
Interview de membres pour évaluer le sentiment de sécurité psychologique, physique

_Objectif_


_Actions_


_Notation_

**** Critère *Ouverture à la nouveauté*
Ouverture de la communauté : Est-ce que la communauté va accepter les nouvelles fonctionnalités ou mon apport en terme d'image ?

_Objectif_


_Actions_


_Notation_

*** Catégorie *Processus*

Quels sont les processus de contribution et d'intégration ? Sur quelle temporalité ?

**** Critère *Processus de gestion des contributions*
Identification des processus de contribution : présence d'un fichier contributing.md, nombre de revues nécessaires pour fusionner

_Objectif_


_Actions_


_Notation_

**** Critère *Liberté des contributions*
Est-ce que les contributions nécessitent l'installation de logiciels propriétaires ?

_Objectif_


_Actions_


_Notation_

**** Critère *Cycle des vie des branches*
Identification du cycle de vie des branches du projet

_Objectif_


_Actions_


_Notation_

**** Critère *Demandes de changements*
Mesure des demandes de changement : nombre total, évolution, nombre sur la période actuelle, temps global d'acceptation, temps de revue suite à une demande de changement, temps de fermeture, nombre de commits contenus

_Objectif_


_Actions_


_Notation_

**** Critère *Demandes de changements refusées*
Mesure des demandes de changement refusées. Permet de jauger la maturité du processus de contribution.

_Objectif_


_Actions_


_Notation_

**** Critère *Tickets*
Mesure des tickets : nombre total, sur la période, ouvertes, fermées, âge, durée de résolution

_Objectif_


_Actions_


_Notation_

**** Critère *Processus d'intégration dans une communauté*
Identification des processus d'intégration dans la communauté : accueil des nouveaux

_Objectif_


_Actions_


_Notation_

**** Critère *Temps d'intégration dans une communauté*
Mesure du temps pour entrer dans les diverses communautés

_Objectif_


_Actions_


_Notation_

**** Critère *Processus automatiques*
Identification des processus automatiques, bots : nombre, typologie. Permet de nuancer d'autres mesures comme le temps de réponse ou le nombre de PR.

_Objectif_


_Actions_


_Notation_

*** Catégorie *Notoriété*

Quelle est l'image publique du projet ? Est-ce qu'il est vu comme moi ?

**** Critère *Notoriété verbale*
Analyse des communautés pour déterminer l'image

_Objectif_


_Actions_


_Notation_

**** Critère *Téléchargements*
Nombre de téléchargement sur les diverses plateformes

_Objectif_


_Actions_


_Notation_

**** Critère *Étoiles*
Nombre d'étoiles sur le ou les dépôts

_Objectif_


_Actions_


_Notation_

**** Critère *Forks*
Nombre de forks sur le dépôt

_Objectif_


_Actions_


_Notation_

**** Critère *Réseaux sociaux*
Présence sur les réseaux

_Objectif_


_Actions_


_Notation_

**** Critère *Nouveaux contributeurs*
Nombre de nouveaux contributeurs sur la période actuelle

_Objectif_


_Actions_


_Notation_

**** Critère *Contributeurs sur les réseaux*
Nombre de contributeurs qui mentionnent leurs contributions au projet sur leurs réseaux

_Objectif_


_Actions_


_Notation_

**** Critère *Emplois impliquant le projet*
Nombre de postes sur le marché impliquant ce projet

_Objectif_


_Actions_


_Notation_

**** Critère *Emplois impliquant les technologies du projet*
Nombre de postes sur le marché impliquant les technologies utilisées au sein de ce projet

_Objectif_


_Actions_


_Notation_

**** Critère *Implication du projet dans la recherche*
Analyse du lien avec la recherche

_Objectif_


_Actions_


_Notation_

**** Critère *Dépendances descendantes*
Nombre de projets dont celui-ci est devenu une dépendance

_Objectif_


_Actions_


_Notation_

**** Lien avec les utilisateurs
**** Lien avec les références 

*** Catégorie *Histoire*

Quelle est l'histoire de la communauté ? Est-ce qu'elle a connu des changements majeurs et rapides par exemple ? 

*** Catégorie *Résilience*

Est-ce que la communauté est suffisamment résiliente pour assurer la pérennité du projet ?

**** Critère *Mainteneurs principaux*
Nombre de mainteneurs principaux

_Objectif_


_Actions_


_Notation_

**** Critère *Temps de résolution d'un bug critique*
Mesure du temps de résolution d'un bug critique par release et non de manière globale, sur les derniers temps

_Objectif_


_Actions_


_Notation_

**** Critère *Facteur bus des développements*
Mesure du Bus factor : combien de contributeurs assurent plus de 50% des contributions ?

_Objectif_


_Actions_


_Notation_

**** Critère *Facteur éléphant des développements*
Mesure du Elephant factor : combien de compagnies assurent plus de 50% des contributions ?

_Objectif_


_Actions_


_Notation_

**** Critère *Explosions d'activités*
Mesure et analyse des explosions d'activité sur le projet (burstiness)

_Objectif_


_Actions_


_Notation_

**** Critère *Départ de mainteneurs principaux*
Analyse du départ des mainteneurs principaux

_Objectif_


_Actions_


_Notation_

**** Lien avec une fondation
**** Lien avec le modèle économique

*** Catégorie *Statut*

Où en est la communauté ? Est-ce que les développeurs sont toujours motivés ou veulent abandonner le projet ?

** Domaine *Politique* 

_Enjeux_

- Est-ce que la politique de ce logiciel est cohérente avec ma stratégie globale et celle de mon contexte géopolitique ? 

_Description_

Dans ce domaine, l'objectif est de d'évaluer les différentes facettes politiques du projet. On retrouvera
à la fois des aspects juridiques comme les licences, mais aussi d'autres aspects comme de la gouvernance. 

*** Catégorie *Gouvernance*

Est-ce que la gouvernance du projet est alignée avec mes attentes ? Qui décide des règles et comment ? Comment intégrer ou sortir de ce groupe ? Historique ?

**** Critère *Présence d'une gouvernance*
Présence d'une gouvernance claire et facilement identifiable

_Objectif_


_Actions_


_Notation_

**** Critère *Type de la gouvernance*
Qualification de la gouvernance

_Objectif_


_Actions_


_Notation_

**** Critère *Facteur éléphant de la gouvernance*
Mesure de l'influence d'une ou plusieurs organisations sur le projet : proportion, niveau priorisation des contributions, présence aux comités, à la gouvernance

_Objectif_


_Actions_


_Notation_

**** Critère *Facteur bus de la gouvernance*
Mesure de l'influence d'une ou plusieurs organisations sur le projet : proportion, niveau priorisation des contributions, présence aux comités, à la gouvernance

_Objectif_


_Actions_


_Notation_

*** Catégorie *Feuille de route*

Est-ce que la feuille de route du projet s'aligne avec mes attentes ?

**** Critère *Présence d'une feuille de route*
Présence d'une feuille de route claire et facilement identifiable

_Objectif_


_Actions_


_Notation_

**** Critère *Alignement avec la feuille de route*
Suis-je aligné avec la feuille de route ?

_Objectif_


_Actions_


_Notation_

**** Critère *Influence de la feuille de route*
Est-ce possible d'influencer la feuille de route ?

_Objectif_


_Actions_


_Notation_

*** Catégorie *Conformité juridique*

Est-ce que le contexte juridique du projet est adaptée à mon propre contexte juridique ? (ex. licences, lois, réglements européens, normes et standards)

**** Critère *Licences*
Présence d'une ou plusieurs licences validées par l'OSI dans un emplacement standard du dépôt

_Objectif_


_Actions_


_Notation_

**** Critère *Couverture des licences*
Mesure de la couverture de code déclarant explicitement une licence : chaque fichier de code devrait avoir une mention à une licence en en-tête

_Objectif_


_Actions_


_Notation_

**** Critère *Licences des dépendances*
Est-ce que les licences des dépendances sont respectées ? Analyse de l'arbre de dépendance.

_Objectif_


_Actions_


_Notation_

**** Critère *Lois locales*
Conformité aux lois françaises et réglements et directives européennes

_Objectif_


_Actions_


_Notation_

**** Critère *Lois extra-territoriales*
Présence de lois intra ou extra territoriales limitants les utilisations ou les contributions au projet

_Objectif_


_Actions_


_Notation_

**** Critère *Brevets*
Présence de brevets

_Objectif_


_Actions_


_Notation_

*** Catégorie *Stratégie interne*

En quoi ce logiciel est utile à ma stratégie globale ?

**** Critère *Stratégie interne*
En quoi ce logiciel me permet d'avancer dans ma stratégie ? Quels sont les gains et les pertes nécesaires, possibles ?

_Objectif_


_Actions_


_Notation_

**** Critère *Image de marque*
Est-ce qu'utiliser ce projet peut avoir une incidence sur mon image de marque ?

_Objectif_


_Actions_


_Notation_

**** Critère *Valeurs*
Est-ce que ce logiciel s'accorde avec mes valeurs ?

_Objectif_


_Actions_


_Notation_

*** Catégorie *Géopolitique*

Est-ce que le contexte géopolitique a un impact sur le projet ? Et inversement, est-ce qu'utiliser ce projet a un impact sur ma géopolitique ?

**** Critère *Contexte géopolitique*
Évaluation du contexte géopolitique en rapport avec le projet

_Objectif_


_Actions_


_Notation_

**** Critère *Composante géopolitique*
Est-ce que ce projet a déjà une composante géopolitique ? Recherches sur internet et interviews. Choisir un projet peut avoir une incidence diplomatique.

_Objectif_


_Actions_


_Notation_

**** Critère *Autonomie technologique*
Est-ce qu'utiliser ce projet modifie l'autonomie technologique de mon pays ?

_Objectif_


_Actions_


_Notation_

**** Lien avec les subventions étatiques dans le modèle économique.

*** Catégorie *Opportunités*

Est-ce qu'il y a une opportunité à saisir ?

**** Critère *Opportunités*
Est-ce qu'il y a des utilisateurs mais plus de développeurs ?

_Objectif_


_Actions_


_Notation_

** Domaine *Économique*

_Enjeux_

- Est-ce que le coût d'utilisation et de participation à la maintenance de la solution est en phase avec mes capacités et les gains attendus ?

_Description_

Dans ce domaine, l'objectif est d'évaluer les facettes économiques du projet pour les communautés impliquées et pour moi.
On s'intéressera donc au modèle économique des entreprises qui gravitent autours de ce logiciel.
Mais on regardera également les couts et gains attendus pour vérifier leurs adéquations avec mes capacités. 

*** Catégorie *Modèle économique*

Quel est le modèle économique actuel ? Est-ce qu'il est en phase avec mes attentes ? Si non, peut-il évoluer ?

**** Critère *Sponsors*
Est-ce que le projet bénéficie d'un ou plusieurs sponsors ?

_Objectif_


_Actions_


_Notation_

**** Critère *Dons*
Est-ce que le projet bénificie de dons ? Par qui ? De quelle nature et à quelle fréquence en moyenne ?

_Objectif_


_Actions_


_Notation_

**** Critère *Subventions*
Est-ce que le projet bénéficie de subventions étatiques ? En échange de quoi ?

_Objectif_


_Actions_


_Notation_

**** Critère *Entreprises*
Est-ce que le projet est porté par une ou plusieurs entreprises ? Si oui, quel est leur modèle économique ? licences duales, vente de services, open core, vente de produits dérivés comme les plugins, SaaS, revenus indirects par effet de halo, dons, mécénat

_Objectif_


_Actions_


_Notation_

**** Critère *Ouverture au changement économique*
Quelle est l'ouverture de la communauté pour aller vers un autre modèle ? Évaluation des évolutions possibles pour tendre vers un modèle pérein.

_Objectif_


_Actions_


_Notation_

**** Lien avec les bénévoles Est-ce que le projet bénéficie d'un ou plusieurs bénévoles ?
**** Lien avec la présence d'une fondation dans les communautés
**** Lien avec la présence d'un consortium dans les communautés
**** Lien avec le Bus factor
**** Lien avec le Elephant factor

*** Catégorie *Coûts internes*

Quels sont les coûts déjà engagés ou à prévoir sur ce projet ?

**** Critère *Coûts à venir*
Évaluation des coûts d'acquisition, d'adaptation, de déploiement, de maintenance, de support, d'opération, de montée en compétence

_Objectif_


_Actions_


_Notation_

**** Critère *Coûts passés*
Évaluation des coûts déjà imputés au projet

_Objectif_


_Actions_


_Notation_

*** Catégorie *Valeurs générées*

Quelles sont les gains économiques qui pourraient être générées ?

**** Critère *Économies réalisables*
Quelles sont les économies réalisables (ex. coût de licence) ?

_Objectif_


_Actions_


_Notation_

**** Critère *Gains quantifiables*
Quelles sont les gains qualifiables (ex. autonomie, flexibilité) ?

_Objectif_


_Actions_


_Notation_

**** Critère *Dépenses évitées*
Quelles sont les dépenses évitées ? Utilisation du modèle COCOMO (creuser https://en.wikipedia.org/wiki/COCOMO)

_Objectif_


_Actions_


_Notation_

** Domaine *Écosystème*

_Enjeux_

- Quelle est la place de ce projet dans son ecosystème ?
- Existe-t-il une opportunité de créer quelque chose de nouveau ? 

_Description_

Dans ce domaine, l'objectif est d'identifier la place de ce logiciel dans l'écosystème des logiciels existants. 

*** Catégorie *FLOSS*

Quelles sont les alternatives libres et ouvertes ?

*** Catégorie *Propriétaire*

Quelles sont les alternatives fermées ?

*** Catégorie *Migration*

Est-ce que la migration est possible ?
